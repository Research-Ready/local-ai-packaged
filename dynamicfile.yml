http:
  routers:
    open-webui:
      rule: "Host(`open-webui.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: open-webui-service
      tls: { certResolver: myresolver }

    flowise:
      rule: "Host(`flowise.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: flowise-service
      tls: { certResolver: myresolver }

    n8n:
      rule: "Host(`n8n.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: n8n-service
      tls: { certResolver: myresolver }

    ollama:
      rule: "Host(`ollama.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: ollama-service
      tls: { certResolver: myresolver }

    searxng:
      rule: "Host(`searxng.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: searxng-service
      tls: { certResolver: myresolver }

    langfuse:
      rule: "Host(`langfuse.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: langfuse-service
      tls: { certResolver: myresolver }

    neo4j:
      rule: "Host(`neo4j.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: neo4j-service
      tls: { certResolver: myresolver }

    clickhouse:
      rule: "Host(`clickhouse.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: clickhouse-service
      tls: { certResolver: myresolver }

    redis:
      rule: "Host(`redis.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: redis-service
      tls: { certResolver: myresolver }

    qdrant:
      rule: "Host(`qdrant.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: qdrant-service
      tls: { certResolver: myresolver }

    supabase-analytics:
      rule: "Host(`analytics.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: analytics-service
      tls: { certResolver: myresolver }

    supabase-kong:
      rule: "Host(`kong.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: kong-service
      tls: { certResolver: myresolver }

    supabase-meta:
      rule: "Host(`meta.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: meta-service
      tls: { certResolver: myresolver }

    supabase-storage:
      rule: "Host(`storage.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: storage-service
      tls: { certResolver: myresolver }

    supabase-imgproxy:
      rule: "Host(`imgproxy.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: imgproxy-service
      tls: { certResolver: myresolver }

    fallback:
      rule: "HostRegexp(`{host:.+}`)"
      entryPoints: [websecure]
      service: open-webui-service  # Or another static fallback
      tls: { certResolver: myresolver }

  services:
    open-webui-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:8080" }]

    flowise-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:3001" }]

    n8n-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:5678" }]

    ollama-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:11434" }]

    searxng-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:8081" }]

    langfuse-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:3000" }]

    neo4j-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:7474" }]

    clickhouse-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:8123" }]

    redis-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:6379" }]

    qdrant-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:6333" }]

    analytics-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:4000" }]

    kong-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:8000" }]

    meta-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:8080" }]

    storage-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:5000" }]

    imgproxy-service:
      loadBalancer:
        servers: [{ url: "http://10.0.7.20:8080" }]
